{
	"id": 0,
	"name": "@thesoulfresh/interactors",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "HTMLPageObject",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "An element interactor that extends the HTML interactor\nfrom @interactors/html but also adds:",
				"text": "### Filters\n- testId : '[data-testid]'\n- label : '[aria-label]'\n- text : better text matching\n- role : '[role]'\n"
			},
			"sources": [
				{
					"fileName": "interactors/html.js",
					"line": 23,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "Function"
			},
			"defaultValue": "..."
		},
		{
			"id": 38,
			"name": "any",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 277,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 39,
					"name": "any",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Match any type constructor in the same\nmanner as Jest `expect.any`.",
						"text": "For example:\n```js\nTextField().has({placeholder: any(String)});\nFoo().has({thing: any(Number)});\n```\n"
					},
					"parameters": [
						{
							"id": 40,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A type constructor\n  that you expect the actual value to be.\n"
							},
							"type": {
								"type": "reference",
								"name": "Function"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 41,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 45,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 285,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 46,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 42,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 280,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 43,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 44,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										45,
										42
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 47,
			"name": "anything",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 294,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 48,
					"name": "anything",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Match any value in the same manner as Jest `expect.anything()`"
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 49,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 54,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 55,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 56,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									},
									"defaultValue": "..."
								},
								{
									"id": 50,
									"name": "match",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 51,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 52,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {},
													"parameters": [
														{
															"id": 53,
															"name": "actual",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										54,
										50
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 11,
			"name": "containingArray",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 192,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 12,
					"name": "containingArray",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Check that an array includes the given items\nin any order. Nested matchers are taken into account.\nSimilar to Jest `expect.arrayContaining`.",
						"text": "Example:\n```js\n// The `value` filter of Foo must be an array that includes\n// the strings 'Foo' and 'Bar' in any order.\nFoo().has({value: containingArray(['Foo', 'Bar']);\n```\n"
					},
					"parameters": [
						{
							"id": 13,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 14,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 18,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 202,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 19,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 15,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 195,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 16,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 17,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										18,
										15
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 29,
			"name": "containingObject",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 252,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 30,
					"name": "containingObject",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Check that the expect object is a subset of\nthe properties of the actual object.\nNested matchers are taken into account.\nSimilar to Jest `expect.objectContaining`",
						"text": "```js\n// The `value` filter of Foo must be an object with\n// only one property. The property must be 'name'\n// and its value must be the string 'foo'.\nFoo().has({value: {name: 'foo'}});\n```\n"
					},
					"parameters": [
						{
							"id": 31,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 32,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 36,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 258,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 37,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 33,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 255,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 34,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 35,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										36,
										33
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 157,
			"name": "elementContent",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "util/text-matching.js",
					"line": 132,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 158,
					"name": "elementContent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Get the \"user readable\" value from an element. This can\ninclude its text, aria-label, input values, etc.",
						"text": "This function is most useful if don't know the type of\nelement you are reading and it could be one of multiple\ndifferent types (ex. input or div). For example, given\nan array of table cells containing plain text and inputs,\nyou could get the readable text for all of them using\n`elements.map(el => elementContent(el, ['text', 'value'])`.\n\nYou can customize the order that values are retrieved\nand which types of content are searched for using the `checks`\nparameter. If the element includes multiple children with the\nsame type of content, you can either recieve just the first\nvalue or collect them into a comma separated string using\nthe `collect` parameter.\n\n```js\n// Given the following HTML\n<div>\n  <span>Hello World</span>\n  <input value=\"foo\" />\n  <input value=\"bar\" />\n</div>\n\n// Get the text content only...\nconst text = elementContent(el);\n// -> 'Hello World'\n\n// Get the input values...\nconst values = elementContent(el, ['value']);\n// -> 'foo, bar'\n\n// Get the input values and then the text...\nconst combined = elementContent(el, ['value', 'text'], true);\n// -> 'foo, bar, Hello World'\n```\n",
						"returns": "\n"
					},
					"parameters": [
						{
							"id": 159,
							"name": "el",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "HTMLElement"
							}
						},
						{
							"id": 160,
							"name": "checks",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list of content\n  types to retrieve."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 161,
							"name": "collect",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "false = return the value\n  of the first matching content type. true = use\n  all matching values."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 144,
			"name": "elementText",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "util/text-matching.js",
					"line": 41,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 145,
					"name": "elementText",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Get the text inside of an element. This is similar to the\n`innerText` function from `@interactors/core` but will also\ntrim the text.",
						"returns": "\n"
					},
					"parameters": [
						{
							"id": 146,
							"name": "element",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "HTMLElement"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 66,
			"name": "equal",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 325,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 67,
					"name": "equal",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Lose equality check using lodash isEqual.",
						"text": "Note: This currently does not handle\nsub-matching."
					},
					"parameters": [
						{
							"id": 68,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 69,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 73,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 333,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 74,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 70,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 328,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 71,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 72,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										73,
										70
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 111,
			"name": "equals",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 339,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 112,
					"name": "equals",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 113,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 114,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 118,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 333,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 119,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 115,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 328,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 116,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 117,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										118,
										115
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 75,
			"name": "greaterThan",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 345,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 76,
					"name": "greaterThan",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Match any number greater than the given value."
					},
					"parameters": [
						{
							"id": 77,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 78,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 82,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 352,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 83,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 79,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 348,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 80,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 81,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										82,
										79
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 120,
			"name": "greaterThanOrEqual",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 375,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 121,
					"name": "greaterThanOrEqual",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 122,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 123,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 127,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 369,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 128,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 124,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 365,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 125,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 126,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										127,
										124
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 84,
			"name": "greaterThanOrEqualTo",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 362,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 85,
					"name": "greaterThanOrEqualTo",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Match any number greater than or equal to the given value."
					},
					"parameters": [
						{
							"id": 86,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 87,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 91,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 369,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 92,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 88,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 365,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 89,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 90,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										91,
										88
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 57,
			"name": "is",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 306,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 58,
					"name": "is",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Strict equality check (ie ===)."
					},
					"parameters": [
						{
							"id": 59,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 60,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 64,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 312,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 65,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 61,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 309,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 62,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 63,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										64,
										61
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 93,
			"name": "lessThan",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 381,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 94,
					"name": "lessThan",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Match any number less than the given value."
					},
					"parameters": [
						{
							"id": 95,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 96,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 100,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 388,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 101,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 97,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 384,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 98,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 99,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										100,
										97
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 129,
			"name": "lessThanOrEqual",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 411,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 130,
					"name": "lessThanOrEqual",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 131,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 132,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 136,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 405,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 137,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 133,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 401,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 134,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 135,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										136,
										133
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 102,
			"name": "lessThanOrEqualTo",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 398,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 103,
					"name": "lessThanOrEqualTo",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Match any number less than or equal to the given value."
					},
					"parameters": [
						{
							"id": 104,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 105,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 109,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 405,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 110,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 106,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 401,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 107,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 108,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										109,
										106
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2,
			"name": "matchingArray",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 162,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 3,
					"name": "matchingArray",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Check that the contents of a list\nmatch the given list (including order).\nOrder is important and all values must match.\nNested matchers are taken into account.\nSimilar to Jest `expect(actual).toEqual(['Foo', bar, 0])`.",
						"text": "Example:\n```js\n// The `value` filter of Foo must be an array with two\n// elements 'Foo' and anything else, in that order.\nFoo().has({value: matchingArray(['Foo', any(Number)])});\n```\n"
					},
					"parameters": [
						{
							"id": 4,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list to\n  match against which may include\n  sub-matchers.\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 5,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 9,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 172,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 10,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 6,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 165,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 7,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 8,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										9,
										6
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 20,
			"name": "matchingObject",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "matchers/matchers.js",
					"line": 225,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 21,
					"name": "matchingObject",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Check that the expect object has all of\nthe same properties of the actual object.\nThis is most useful as a sub-matcher inside\nof `containingArray` or `matchingArray`.\nNested matchers are taken into account.\nSimilar to Jest `expect(thing).toEqual({name: 'foo'})`",
						"text": "```js\n// The `value` filter of Foo must be an object with\n// only one property. The property must be 'name'\n// and its value must be the string 'foo'.\nFoo().has({value: matchingObject({name: 'foo'})});\n```\n"
					},
					"parameters": [
						{
							"id": 22,
							"name": "expected",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 23,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 27,
									"name": "description",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 231,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 28,
											"name": "description",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 24,
									"name": "match",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "matchers/matchers.js",
											"line": 228,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 25,
											"name": "match",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 26,
													"name": "actual",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										27,
										24
									]
								}
							]
						}
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				1
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				38,
				47,
				11,
				29,
				157,
				144,
				66,
				111,
				75,
				120,
				84,
				57,
				93,
				129,
				102,
				2,
				20
			]
		}
	],
	"sources": [
		{
			"fileName": "index.js",
			"line": 1,
			"character": 0
		}
	]
}